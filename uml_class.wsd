@startuml
interface Arc {
    ____
    Arc()
    ____
    {abstract} **Node** 	getDestination() 	 
    {abstract} **float** 	getLength() 	 
    **double** 	getMinimumTravelTime() 
    {abstract} **Node** 	getOrigin() 	 
    {abstract} **List<Point>** 	getPoints() 	 
    {abstract} **RoadInformation** 	getRoadInformation() 	 
    **double** 	getTravelTime​(double speed)
}
class Graph {
    __ private final __
    **- String** mapId
    **- String** mapName
    **- List<Node>** nodes
    ____
    Graph​(String mapId, String mapName, List<Node> nodes, GraphStatistics graphStatistics)
    ____
    **+ Node** get(int id)
    **+ List<Node>** 	getNodes() 	 
    **+ int** 	size() 	 
}
class Path {
    __ private final __
    **- Graph** graph
    **- Node** origin
    **- List<Arc>** arcs
    ____
    Path​(Graph graph) 	
    Path​(Graph graph, List<Arc> arcs) 	
    Path​(Graph graph, Node node)
    ____
    **+ List<Arc>** getArcs() 	 
    **+ Node** getDestination() 	 
    **+ Graph** getGraph() 	 
    **+ Node** getOrigin() 
    **+ boolean** isEmpty() 
    **+ float** getLength()	
    **+ double** getMinimumTravelTime()
    **+ boolean** isValid()
    **+ int** size()
    __ A implémenter __
    **+ double** getTravelTime​(double speed)
    {static} **+ Path** createFastestPathFromNodes​(Graph graph, List<Node> nodes) 
    {static} **+ Path** createShortestPathFromNodes​(Graph graph, List<Node> nodes) 
}
class Node {
    __private final__
    **- int** id
    **- Point** point
    **- ArrayList<Arc>** successors
    ____
    Node​(int id, Point point)
    ____
    **+ int** 	compareTo​(Node other) 	
    **+ boolean** 	equals​(java.lang.Object other) 	 
    **+ int** 	getId() 	 
    **+ int** 	getNumberOfSuccessors() 	 
    **+ Point** 	getPoint() 	 
    **+ List<Arc>** 	getSuccessors() 	 
    **+ boolean** 	hasSuccessors() 	 
}
Arc "*" <---> "1" Node
Graph "1" ---> "*" Node
Path "*"---> "1" Graph
Path "*" ---> "*" Node
Path "*" ---> "*" Arc
@enduml